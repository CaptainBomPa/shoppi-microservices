version: '3.8'

services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    networks:
      - shoppi_network
    command: >
      sh -c "rabbitmq-plugins enable rabbitmq_prometheus && rabbitmq-server"

  eureka:
    image: steeltoeoss/eureka-server
    container_name: eureka
    restart: always
    ports:
      - "8761:8761"
    networks:
      - shoppi_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - shoppi_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - shoppi_network

  loki:
    image: grafana/loki
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - shoppi_network

  promtail:
    image: grafana/promtail
    container_name: promtail
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    networks:
      - shoppi_network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    environment:
      - STORAGE_TYPE=mem
      - QUERY_PORT=9411
      - JAVA_OPTS=-Dzipkin.metrics.prometheus.enabled=true
    ports:
      - "9411:9411"
    networks:
      - shoppi_network

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    restart: always
    depends_on:
      - eureka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - maven_local:/root/.m2
      - ./.env:/app/.env
    ports:
      - "8080:8080"
    networks:
      - shoppi_network

  postgres-user-service:
    image: postgres:15
    container_name: postgres-user-service
    restart: always
    environment:
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: user_db
    ports:
      - "5433:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - shoppi_network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    restart: always
    depends_on:
      - postgres-user-service
      - eureka
      - rabbitmq
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8081:8081"
    volumes:
      - maven_local:/root/.m2
      - ./user-service/.env:/app/.env
    networks:
      - shoppi_network

  postgres-product-service:
    image: postgres:15
    container_name: postgres-product-service
    restart: always
    environment:
      POSTGRES_USER: product_admin
      POSTGRES_PASSWORD: product_password
      POSTGRES_DB: product_db
    ports:
      - "5434:5432"
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
    networks:
      - shoppi_network

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    restart: always
    depends_on:
      - postgres-product-service
      - eureka
      - rabbitmq
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8082:8082"
    volumes:
      - maven_local:/root/.m2
      - ./product-service/.env:/app/.env
    networks:
      - shoppi_network

volumes:
  user_postgres_data:
  product_postgres_data:
  grafana_data:
  maven_local:

networks:
  shoppi_network: